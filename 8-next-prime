public Integer nextPrime(Integer num) {

    // If input number is negative, return 2, ie. the smallest prime number
    if (num < 2) {
        return 2;
    }
    Integer current = num + 1;

    // Infinite loop continues until a prime number is found
    while (true) {
        Boolean isPrime = true;
        // Check divisibility from 2 up to the square root of current
        for (Integer i = 2; i * i <= current; i++) {
            // If divisible, set flag to false and break out of the for loop
            if (Math.mod(current, i) == 0) {
                isPrime = false;
                break;
            }
        }

        if (isPrime) {
            return current; // Return the prime number found
        }
        // If no prime number has been found yet, move to the next number
        current += 1; 
    }

    // The while loop is infinite and always returns a prime number, 
    // hence this return statement will technically never be reached.
    // If no prime number has been found yet, move to the next number
    // It is only needed to satisfy the compiler.
    return null;
}
